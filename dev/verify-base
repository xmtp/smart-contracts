#!/bin/bash
set -euo pipefail

# TODO: Add verify-check via https://getfoundry.sh/forge/reference/forge-verify-check.html

source "$(dirname "$0")/utils"

# Load environment variables from .env file if it exists
if [ -f ".env" ]; then
    source .env
fi

# TODO: use internal variables for less duplication of comparisons.

# Check if both arguments are provided
if [ $# -ne 2 ]; then
    echo "Usage: $0 <chain-name> <explorer>"
    echo "chain-name: The chain to verify (e.g. base_mainnet, base_sepolia, xmtp_ropsten)"
    echo "explorer: The explorer to use (e.g. basescan, blockscout, alchemy)"
    exit 1
fi

CHAIN_NAME=$1
EXPLORER=$2

# Validate chain name
if [[ ! "$CHAIN_NAME" =~ ^(base_mainnet|base_sepolia|xmtp_ropsten)$ ]]; then
    echo "Error: Invalid chain name. Must be one of: base_mainnet, base_sepolia, xmtp_ropsten"
    exit 1
fi

# Determine properties based on chain name
case "$CHAIN_NAME" in
    "base_mainnet")
        ENVIRONMENT="mainnet"
        CHAIN_ID="8453"
        CHAIN_TYPE="settlement-chain"
        ;;
    "base_sepolia")
        ENVIRONMENT="testnet-dev"
        CHAIN_ID="84532"
        CHAIN_TYPE="settlement-chain"
        ;;
    "xmtp_ropsten")
        ENVIRONMENT="testnet-dev"
        CHAIN_ID="351243127"
        CHAIN_TYPE="app-chain"
        ;;
esac

# Validate for app-chain/alchemy
if [[ ("$CHAIN_TYPE" == "app-chain" && "$EXPLORER" != "alchemy") || \
      ("$CHAIN_TYPE" != "app-chain" && "$EXPLORER" == "alchemy") ]]; then
    echo "Error: alchemy is the only supported explorer for app-chain verification"
    exit 1
fi

VERIFIER=$(get_verifier "$EXPLORER")
EXPLORER_URL=$(get_explorer_url "$ENVIRONMENT" "$EXPLORER")
API_KEY=$(get_api_key "$EXPLORER")

echo "⧖ Verifying base contracts on $CHAIN_NAME."

if [ "$CHAIN_TYPE" = "settlement-chain" ]; then
    FACTORY=$(get_environment_value "$ENVIRONMENT" "factory")
    FACTORY_IMPLEMENTATION=$(get_environment_value "$ENVIRONMENT" "factoryImplementation")
    FEE_TOKEN_IMPLEMENTATION=$(get_environment_value "$ENVIRONMENT" "feeTokenImplementation")
    FEE_TOKEN_PROXY=$(get_environment_value "$ENVIRONMENT" "feeTokenProxy")
    INITIALIZABLE_IMPLEMENTATION=$(get_environment_value "$ENVIRONMENT" "initializableImplementation")
    PARAMETER_REGISTRY_PROXY=$(get_environment_value "$ENVIRONMENT" "parameterRegistryProxy")
    SETTLEMENT_CHAIN_PARAMETER_REGISTRY_IMPLEMENTATION=$(get_environment_value "$ENVIRONMENT" "settlementChainParameterRegistryImplementation")
    UNDERLYING_FEE_TOKEN=$(get_environment_value "$ENVIRONMENT" "underlyingFeeToken")

    if [ "$ENVIRONMENT" = "mainnet" ]; then
        MOCK_UNDERLYING_FEE_TOKEN_IMPLEMENTATION="0x0000000000000000000000000000000000000000"
    else
        MOCK_UNDERLYING_FEE_TOKEN_IMPLEMENTATION=$(get_environment_value "$ENVIRONMENT" "mockUnderlyingFeeTokenImplementation")
    fi

    echo ""

    forge verify-contract --verifier "$VERIFIER" --verifier-url "$EXPLORER_URL" --chain-id "$CHAIN_ID" --api-key "$API_KEY" \
        "$INITIALIZABLE_IMPLEMENTATION" \
        src/any-chain/Initializable.sol:Initializable

    sleep 2

    echo ""

    forge verify-contract --verifier "$VERIFIER" --verifier-url "$EXPLORER_URL" --chain-id "$CHAIN_ID" --api-key "$API_KEY" \
        --constructor-args $(cast abi-encode "constructor(address)" "$PARAMETER_REGISTRY_PROXY") \
        "$FACTORY_IMPLEMENTATION" \
        src/any-chain/Factory.sol:Factory

    sleep 2

    echo ""

    # Verifying the proxy for the factory should suffice for the explorer to pick up the other proxies.
    forge verify-contract --verifier "$VERIFIER" --verifier-url "$EXPLORER_URL" --chain-id "$CHAIN_ID" --api-key "$API_KEY" \
        --constructor-args $(cast abi-encode "constructor(address)" "$FACTORY_IMPLEMENTATION") \
        "$FACTORY" \
        src/any-chain/Proxy.sol:Proxy

    sleep 2

    echo ""

    forge verify-contract --verifier "$VERIFIER" --verifier-url "$EXPLORER_URL" --chain-id "$CHAIN_ID" --api-key "$API_KEY" \
        "$SETTLEMENT_CHAIN_PARAMETER_REGISTRY_IMPLEMENTATION" \
        src/settlement-chain/SettlementChainParameterRegistry.sol:SettlementChainParameterRegistry

    sleep 2

    echo ""

    if [ "$ENVIRONMENT" != "mainnet" ]; then
        forge verify-contract --verifier "$VERIFIER" --verifier-url "$EXPLORER_URL" --chain-id "$CHAIN_ID" --api-key "$API_KEY" \
            --constructor-args $(cast abi-encode "constructor(address)" "$PARAMETER_REGISTRY_PROXY") \
            "$MOCK_UNDERLYING_FEE_TOKEN_IMPLEMENTATION" \
            test/utils/Mocks.sol:MockUnderlyingFeeToken

        sleep 2

        echo ""
    fi

    forge verify-contract --verifier "$VERIFIER" --verifier-url "$EXPLORER_URL" --chain-id "$CHAIN_ID" --api-key "$API_KEY" \
        --constructor-args $(cast abi-encode "constructor(address,address)" "$PARAMETER_REGISTRY_PROXY" "$UNDERLYING_FEE_TOKEN") \
        "$FEE_TOKEN_IMPLEMENTATION" \
        src/settlement-chain/FeeToken.sol:FeeToken

    sleep 2

    # NOTE: Proxy verification is inconsistent due to etherscan-like explorer bugs.
    if [ "$EXPLORER" = "basescan" ]; then
        echo ""
        echo "Verifying Proxy For Factory"

        if ! curl -d "address=${FACTORY}&expectedimplementation=${FACTORY_IMPLEMENTATION}" "${EXPLORER_URL}?chainid=${CHAIN_ID}&module=contract&action=verifyproxycontract&apikey=${API_KEY}"; then
            echo "Warning: Failed to verify proxy for Factory" >&2
        fi

        sleep 2

        echo ""
        echo "Verifying Proxy For SettlementChainParameterRegistry"

        if ! curl -d "address=${PARAMETER_REGISTRY_PROXY}&expectedimplementation=${SETTLEMENT_CHAIN_PARAMETER_REGISTRY_IMPLEMENTATION}" "${EXPLORER_URL}?chainid=${CHAIN_ID}&module=contract&action=verifyproxycontract&apikey=${API_KEY}"; then
            echo "Warning: Failed to verify proxy for SettlementChainParameterRegistry" >&2
        fi
        sleep 2

        echo ""
        echo "Verifying Proxy For FeeToken"

        if ! curl -d "address=${FEE_TOKEN_PROXY}&expectedimplementation=${FEE_TOKEN_IMPLEMENTATION}" "${EXPLORER_URL}?chainid=${CHAIN_ID}&module=contract&action=verifyproxycontract&apikey=${API_KEY}"; then
            echo "Warning: Failed to verify proxy for FeeToken" >&2
        fi

        sleep 2

        if [ "$ENVIRONMENT" != "mainnet" ]; then
            echo ""
            echo "Verifying Proxy For UnderlyingFeeToken"

            if ! curl -d "address=${UNDERLYING_FEE_TOKEN}&expectedimplementation=${MOCK_UNDERLYING_FEE_TOKEN_IMPLEMENTATION}" "${EXPLORER_URL}?chainid=${CHAIN_ID}&module=contract&action=verifyproxycontract&apikey=${API_KEY}"; then
                echo "Warning: Failed to verify proxy for UnderlyingFeeToken" >&2
            fi
        fi

        echo ""
        echo "--> Proxy verification is inconsistent due to etherscan-like explorer bugs. Manually confirm and/or perform proxy verification in the explorer.<--"
    fi
else
    APP_CHAIN_PARAMETER_REGISTRY_IMPLEMENTATION=$(get_environment_value "$ENVIRONMENT" "appChainParameterRegistryImplementation")
    FACTORY=$(get_environment_value "$ENVIRONMENT" "factory")
    FACTORY_IMPLEMENTATION=$(get_environment_value "$ENVIRONMENT" "factoryImplementation")
    INITIALIZABLE_IMPLEMENTATION=$(get_environment_value "$ENVIRONMENT" "initializableImplementation")
    PARAMETER_REGISTRY_PROXY=$(get_environment_value "$ENVIRONMENT" "parameterRegistryProxy")

    echo ""

    forge verify-contract --verifier "$VERIFIER" --verifier-url "$EXPLORER_URL" --chain-id "$CHAIN_ID" --api-key "$API_KEY" \
        "$INITIALIZABLE_IMPLEMENTATION" \
        src/any-chain/Initializable.sol:Initializable

    sleep 2

    echo ""

    forge verify-contract --verifier "$VERIFIER" --verifier-url "$EXPLORER_URL" --chain-id "$CHAIN_ID" --api-key "$API_KEY" \
        --constructor-args $(cast abi-encode "constructor(address)" "$PARAMETER_REGISTRY_PROXY") \
        "$FACTORY_IMPLEMENTATION" \
        src/any-chain/Factory.sol:Factory

    sleep 2

    echo ""

    # Verifying the proxy for the factory should suffice for the explorer to pick up the other proxies.
    forge verify-contract --verifier "$VERIFIER" --verifier-url "$EXPLORER_URL" --chain-id "$CHAIN_ID" --api-key "$API_KEY" \
        --constructor-args $(cast abi-encode "constructor(address)" "$INITIALIZABLE_IMPLEMENTATION") \
        "$FACTORY" \
        src/any-chain/Proxy.sol:Proxy

    sleep 2

    echo ""

    forge verify-contract --verifier "$VERIFIER" --verifier-url "$EXPLORER_URL" --chain-id "$CHAIN_ID" --api-key "$API_KEY" \
        "$APP_CHAIN_PARAMETER_REGISTRY_IMPLEMENTATION" \
        src/app-chain/AppChainParameterRegistry.sol:AppChainParameterRegistry
fi

echo "✔ Done verifying base contracts for $CHAIN_NAME."
