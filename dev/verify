#!/bin/bash
set -euo pipefail

source "$(dirname "$0")/utils"

# Load environment variables from .env file if it exists
if [ -f ".env" ]; then
    source .env
fi

# TODO: use internal variables for less duplication of comparisons.

# Check if both arguments are provided
if [ $# -ne 3 ]; then
    echo "Usage: $0 <environment> <chain-type> <explorer> <api-key>"
    echo "environment: The environment to deploy to (e.g. testnet-dev, testnet-staging, testnet, mainnet)"
    echo "chain-type: Either 'settlement-chain' or 'app-chain'"
    echo "explorer: The explorer to use (e.g. basescan, blockscout, alchemy)"
    exit 1
fi

ENVIRONMENT=$1
CHAIN_TYPE=$2
EXPLORER=$3

# Validate environment parameter
if [[ ! "$ENVIRONMENT" =~ ^(testnet-dev|testnet-staging|testnet|mainnet)$ ]]; then
    echo "Error: Invalid environment. Must be one of: testnet-dev, testnet-staging, testnet, mainnet"
    exit 1
fi

# Validate chain type
if [ "$CHAIN_TYPE" != "settlement-chain" ] && [ "$CHAIN_TYPE" != "app-chain" ]; then
    echo "Error: chain-type must be either 'settlement-chain' or 'app-chain'"
    exit 1
fi

if [ "$CHAIN_TYPE" = "app-chain" ]; then
    CHAIN_ID=$(get_environment_value "$ENVIRONMENT" "appChainId")
else
    CHAIN_ID=$(get_environment_value "$ENVIRONMENT" "settlementChainId")
fi

# Validate for app-chain/alchemy
if [[ ("$CHAIN_TYPE" == "app-chain" && "$EXPLORER" != "alchemy") || \
      ("$CHAIN_TYPE" != "app-chain" && "$EXPLORER" == "alchemy") ]]; then
    echo "Error: alchemy is the only supported explorer for app-chain verification"
    exit 1
fi

# Determine VERIFIER and EXPLORER_URL based on EXPLORER, ENVIRONMENT, CHAIN_TYPE
if [ "$EXPLORER" = "basescan" ]; then
    VERIFIER="etherscan"

    if [ "$ENVIRONMENT" = "mainnet" ]; then
        EXPLORER_URL="https://api.basescan.org/api"
    else
        EXPLORER_URL="https://api-sepolia.basescan.org/api"
    fi
elif [ "$EXPLORER" = "blockscout" ]; then
    VERIFIER="blockscout"

    if [ "$ENVIRONMENT" = "mainnet" ]; then
        EXPLORER_URL="https://base.blockscout.com/api?"
    else
        EXPLORER_URL="https://base-sepolia.blockscout.com/api?"
    fi
elif [ "$EXPLORER" = "alchemy" ]; then
    VERIFIER="blockscout"

    if [ "$ENVIRONMENT" = "mainnet" ]; then
        EXPLORER_URL="https://xmtp.explorer.alchemy.com/api\?"
    else
        EXPLORER_URL="https://xmtp-testnet.explorer.alchemy.com/api\?"
    fi
else
    echo "Error: explorer must be basescan, blockscout, or alchemy"
    exit 1
fi

echo "â§– Verifying $CHAIN_TYPE contracts on $ENVIRONMENT."

if [ "$CHAIN_TYPE" = "settlement-chain" ]; then
    # Validate BASESCAN_API_KEY is set
    if [ -z "${BASESCAN_API_KEY:-}" ]; then
        echo "Error: BASESCAN_API_KEY not found in .env file"
        exit 1
    fi

    APP_CHAIN_NATIVE_TOKEN=$(get_environment_value "$ENVIRONMENT" "appChainNativeToken")
    DISTRIBUTION_MANAGER_IMPLEMENTATION=$(get_environment_value "$ENVIRONMENT" "distributionManagerImplementation")
    DISTRIBUTION_MANAGER_PROXY=$(get_environment_value "$ENVIRONMENT" "distributionManagerProxy")
    FACTORY=$(get_environment_value "$ENVIRONMENT" "factory")
    GATEWAY_PROXY=$(get_environment_value "$ENVIRONMENT" "gatewayProxy")
    INITIALIZABLE_IMPLEMENTATION=$(get_environment_value "$ENVIRONMENT" "initializableImplementation")
    NODE_REGISTRY_IMPLEMENTATION=$(get_environment_value "$ENVIRONMENT" "nodeRegistryImplementation")
    NODE_REGISTRY_PROXY=$(get_environment_value "$ENVIRONMENT" "nodeRegistryProxy")
    PARAMETER_REGISTRY_PROXY=$(get_environment_value "$ENVIRONMENT" "parameterRegistryProxy")
    PAYER_REGISTRY_IMPLEMENTATION=$(get_environment_value "$ENVIRONMENT" "payerRegistryImplementation")
    PAYER_REGISTRY_PROXY=$(get_environment_value "$ENVIRONMENT" "payerRegistryProxy")
    PAYER_REPORT_MANAGER_IMPLEMENTATION=$(get_environment_value "$ENVIRONMENT" "payerReportManagerImplementation")
    PAYER_REPORT_MANAGER_PROXY=$(get_environment_value "$ENVIRONMENT" "payerReportManagerProxy")
    RATE_REGISTRY_IMPLEMENTATION=$(get_environment_value "$ENVIRONMENT" "rateRegistryImplementation")
    RATE_REGISTRY_PROXY=$(get_environment_value "$ENVIRONMENT" "rateRegistryProxy")
    SETTLEMENT_CHAIN_GATEWAY_IMPLEMENTATION=$(get_environment_value "$ENVIRONMENT" "settlementChainGatewayImplementation")
    SETTLEMENT_CHAIN_PARAMETER_REGISTRY_IMPLEMENTATION=$(get_environment_value "$ENVIRONMENT" "settlementChainParameterRegistryImplementation")

    echo ""

    forge verify-contract --verifier "$VERIFIER" --verifier-url "$EXPLORER_URL" --chain-id "$CHAIN_ID" --api-key "$BASESCAN_API_KEY" \
        "$INITIALIZABLE_IMPLEMENTATION" \
        src/any-chain/Initializable.sol:Initializable

    sleep 2

    echo ""

    forge verify-contract --verifier "$VERIFIER" --verifier-url "$EXPLORER_URL" --chain-id "$CHAIN_ID" --api-key "$BASESCAN_API_KEY" \
        "$FACTORY" \
        src/any-chain/Factory.sol:Factory

    sleep 2

    echo ""

    forge verify-contract --verifier "$VERIFIER" --verifier-url "$EXPLORER_URL" --chain-id "$CHAIN_ID" --api-key "$BASESCAN_API_KEY" \
        "$SETTLEMENT_CHAIN_PARAMETER_REGISTRY_IMPLEMENTATION" \
        src/settlement-chain/SettlementChainParameterRegistry.sol:SettlementChainParameterRegistry

    sleep 2

    echo ""

    # Verifying the proxy for the parameter registry should suffice for the explorer to pick up the other proxies.
    forge verify-contract --verifier "$VERIFIER" --verifier-url "$EXPLORER_URL" --chain-id "$CHAIN_ID" --api-key "$BASESCAN_API_KEY" \
        --constructor-args $(cast abi-encode "constructor(address)" "$INITIALIZABLE_IMPLEMENTATION") \
        "$PARAMETER_REGISTRY_PROXY" \
        src/any-chain/Proxy.sol:Proxy

    sleep 2

    echo ""

    forge verify-contract --verifier "$VERIFIER" --verifier-url "$EXPLORER_URL" --chain-id "$CHAIN_ID" --api-key "$BASESCAN_API_KEY" \
        --constructor-args $(cast abi-encode "constructor(address,address,address)" \
            "$PARAMETER_REGISTRY_PROXY" \
            "$GATEWAY_PROXY" \
            "$APP_CHAIN_NATIVE_TOKEN") \
        "$SETTLEMENT_CHAIN_GATEWAY_IMPLEMENTATION" \
        src/settlement-chain/SettlementChainGateway.sol:SettlementChainGateway

    sleep 2

    echo ""

    forge verify-contract --verifier "$VERIFIER" --verifier-url "$EXPLORER_URL" --chain-id "$CHAIN_ID" --api-key "$BASESCAN_API_KEY" \
        --constructor-args $(cast abi-encode "constructor(address,address)" \
            "$PARAMETER_REGISTRY_PROXY" \
            "$APP_CHAIN_NATIVE_TOKEN") \
        "$PAYER_REGISTRY_IMPLEMENTATION" \
        src/settlement-chain/PayerRegistry.sol:PayerRegistry

    sleep 2

    echo ""

    forge verify-contract --verifier "$VERIFIER" --verifier-url "$EXPLORER_URL" --chain-id "$CHAIN_ID" --api-key "$BASESCAN_API_KEY" \
        --constructor-args $(cast abi-encode "constructor(address)" "$PARAMETER_REGISTRY_PROXY") \
        "$RATE_REGISTRY_IMPLEMENTATION" \
        src/settlement-chain/RateRegistry.sol:RateRegistry

    sleep 2

    echo ""

    forge verify-contract --verifier "$VERIFIER" --verifier-url "$EXPLORER_URL" --chain-id "$CHAIN_ID" --api-key "$BASESCAN_API_KEY" \
        --constructor-args $(cast abi-encode "constructor(address)" "$PARAMETER_REGISTRY_PROXY") \
        "$NODE_REGISTRY_IMPLEMENTATION" \
        src/settlement-chain/NodeRegistry.sol:NodeRegistry

    sleep 2

    echo ""

    forge verify-contract --verifier "$VERIFIER" --verifier-url "$EXPLORER_URL" --chain-id "$CHAIN_ID" --api-key "$BASESCAN_API_KEY" \
        --constructor-args $(cast abi-encode "constructor(address,address,address)" \
            "$PARAMETER_REGISTRY_PROXY" \
            "$NODE_REGISTRY_PROXY" \
            "$PAYER_REGISTRY_PROXY") \
        "$PAYER_REPORT_MANAGER_IMPLEMENTATION" \
        src/settlement-chain/PayerReportManager.sol:PayerReportManager

    sleep 2

    echo ""

    forge verify-contract --verifier "$VERIFIER" --verifier-url "$EXPLORER_URL" --chain-id "$CHAIN_ID" --api-key "$BASESCAN_API_KEY" \
        --constructor-args $(cast abi-encode "constructor(address,address,address,address,address)" \
            "$PARAMETER_REGISTRY_PROXY" \
            "$NODE_REGISTRY_PROXY" \
            "$PAYER_REPORT_MANAGER_PROXY" \
            "$PAYER_REGISTRY_PROXY" \
            "$APP_CHAIN_NATIVE_TOKEN") \
        "$DISTRIBUTION_MANAGER_IMPLEMENTATION" \
        src/settlement-chain/DistributionManager.sol:DistributionManager

    sleep 2

    # NOTE: Proxy verification is inconsistent due to etherscan-like explorer bugs.
    if [ "$EXPLORER" = "basescan" ]; then
        echo ""
        echo "Verifying Proxy For SettlementChainParameterRegistry"

        if ! curl -d "address=${PARAMETER_REGISTRY_PROXY}&expectedimplementation=${SETTLEMENT_CHAIN_PARAMETER_REGISTRY_IMPLEMENTATION}" "${EXPLORER_URL}?chainid=${CHAIN_ID}&module=contract&action=verifyproxycontract&apikey=${BASESCAN_API_KEY}"; then
            echo "Warning: Failed to verify proxy for SettlementChainParameterRegistry" >&2
        fi

        sleep 2

        echo ""
        echo "Verifying Proxy For SettlementChainGateway"

        if ! curl -d "address=${GATEWAY_PROXY}&expectedimplementation=${SETTLEMENT_CHAIN_GATEWAY_IMPLEMENTATION}" "${EXPLORER_URL}?chainid=${CHAIN_ID}&module=contract&action=verifyproxycontract&apikey=${BASESCAN_API_KEY}"; then
            echo "Warning: Failed to verify proxy for SettlementChainGateway" >&2
        fi

        sleep 2

        echo ""
        echo "Verifying Proxy For PayerRegistry"

        if ! curl -d "address=${PAYER_REGISTRY_PROXY}&expectedimplementation=${PAYER_REGISTRY_IMPLEMENTATION}" "${EXPLORER_URL}?chainid=${CHAIN_ID}&module=contract&action=verifyproxycontract&apikey=${BASESCAN_API_KEY}"; then
            echo "Warning: Failed to verify proxy for PayerRegistry" >&2
        fi

        sleep 2

        echo ""
        echo "Verifying Proxy For RateRegistry"

        if ! curl -d "address=${RATE_REGISTRY_PROXY}&expectedimplementation=${RATE_REGISTRY_IMPLEMENTATION}" "${EXPLORER_URL}?chainid=${CHAIN_ID}&module=contract&action=verifyproxycontract&apikey=${BASESCAN_API_KEY}"; then
            echo "Warning: Failed to verify proxy for RateRegistry" >&2
        fi

        sleep 2

        echo ""
        echo "Verifying Proxy For NodeRegistry"

        if ! curl -d "address=${NODE_REGISTRY_PROXY}&expectedimplementation=${NODE_REGISTRY_IMPLEMENTATION}" "${EXPLORER_URL}?chainid=${CHAIN_ID}&module=contract&action=verifyproxycontract&apikey=${BASESCAN_API_KEY}"; then
            echo "Warning: Failed to verify proxy for NodeRegistry" >&2
        fi

        sleep 2

        echo ""
        echo "Verifying Proxy For PayerReportManager"

        if ! curl -d "address=${PAYER_REPORT_MANAGER_PROXY}&expectedimplementation=${PAYER_REPORT_MANAGER_IMPLEMENTATION}" "${EXPLORER_URL}?chainid=${CHAIN_ID}&module=contract&action=verifyproxycontract&apikey=${BASESCAN_API_KEY}"; then
            echo "Warning: Failed to verify proxy for PayerReportManager" >&2
        fi

        sleep 2

        echo ""
        echo "Verifying Proxy For DistributionManager"

        if ! curl -d "address=${DISTRIBUTION_MANAGER_PROXY}&expectedimplementation=${DISTRIBUTION_MANAGER_IMPLEMENTATION}" "${EXPLORER_URL}?chainid=${CHAIN_ID}&module=contract&action=verifyproxycontract&apikey=${BASESCAN_API_KEY}"; then
            echo "Warning: Failed to verify proxy for DistributionManager" >&2
        fi

        echo ""
        echo "--> Proxy verification is inconsistent due to etherscan-like explorer bugs. Manually confirm and/or perform proxy verification in the explorer.<--"
    fi
else
    # Validate BLOCKSCOUT_API_KEY is set
    if [ -z "${BLOCKSCOUT_API_KEY:-}" ]; then
        echo "Error: BLOCKSCOUT_API_KEY not found in .env file"
        exit 1
    fi

    APP_CHAIN_GATEWAY_IMPLEMENTATION=$(get_environment_value "$ENVIRONMENT" "appChainGatewayImplementation")
    APP_CHAIN_PARAMETER_REGISTRY_IMPLEMENTATION=$(get_environment_value "$ENVIRONMENT" "appChainParameterRegistryImplementation")
    GATEWAY_PROXY=$(get_environment_value "$ENVIRONMENT" "gatewayProxy")
    GROUP_MESSAGE_BROADCASTER_IMPLEMENTATION=$(get_environment_value "$ENVIRONMENT" "groupMessageBroadcasterImplementation")
    GROUP_MESSAGE_BROADCASTER_PROXY=$(get_environment_value "$ENVIRONMENT" "groupMessageBroadcasterProxy")
    IDENTITY_UPDATE_BROADCASTER_IMPLEMENTATION=$(get_environment_value "$ENVIRONMENT" "identityUpdateBroadcasterImplementation")
    IDENTITY_UPDATE_BROADCASTER_PROXY=$(get_environment_value "$ENVIRONMENT" "identityUpdateBroadcasterProxy")
    PARAMETER_REGISTRY_PROXY=$(get_environment_value "$ENVIRONMENT" "parameterRegistryProxy")

    forge verify-contract --verifier "$VERIFIER" --verifier-url "$EXPLORER_URL" --chain-id "$CHAIN_ID" --api-key "$BLOCKSCOUT_API_KEY" \
        "$APP_CHAIN_PARAMETER_REGISTRY_IMPLEMENTATION" \
        src/app-chain/AppChainParameterRegistry.sol:AppChainParameterRegistry

    sleep 2

    echo ""

    # Verifying the proxy for the parameter registry should suffice for the explorer to pick up the other proxies.
    forge verify-contract --verifier "$VERIFIER" --verifier-url "$EXPLORER_URL" --chain-id "$CHAIN_ID" --api-key "$BLOCKSCOUT_API_KEY" \
        --constructor-args $(cast abi-encode "constructor(address,address)" \
            "$PARAMETER_REGISTRY_PROXY" \
            "$GATEWAY_PROXY") \
        "$APP_CHAIN_GATEWAY_IMPLEMENTATION" \
        src/app-chain/AppChainGateway.sol:AppChainGateway

    sleep 2

    echo ""

    forge verify-contract --verifier "$VERIFIER" --verifier-url "$EXPLORER_URL" --chain-id "$CHAIN_ID" --api-key "$BLOCKSCOUT_API_KEY" \
        --constructor-args $(cast abi-encode "constructor(address)" "$PARAMETER_REGISTRY_PROXY") \
        "$GROUP_MESSAGE_BROADCASTER_IMPLEMENTATION" \
        src/app-chain/GroupMessageBroadcaster.sol:GroupMessageBroadcaster

    sleep 2

    echo ""

    forge verify-contract --verifier "$VERIFIER" --verifier-url "$EXPLORER_URL" --chain-id "$CHAIN_ID" --api-key "$BLOCKSCOUT_API_KEY" \
        --constructor-args $(cast abi-encode "constructor(address)" "$PARAMETER_REGISTRY_PROXY") \
        "$IDENTITY_UPDATE_BROADCASTER_IMPLEMENTATION" \
        src/app-chain/IdentityUpdateBroadcaster.sol:IdentityUpdateBroadcaster
fi

echo "âœ” Done verifying $CHAIN_TYPE contracts on $ENVIRONMENT."
